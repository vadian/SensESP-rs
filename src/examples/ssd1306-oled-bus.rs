use anyhow::{bail, Result};
use esp_idf_hal::gpio::PinDriver;
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::Peripherals;
use sensesp::i2c::I2CDisplayInterface;
use sensesp::wifi::wifi;
use toml_cfg::toml_config;

use esp_idf_svc::hal::i2c::config;
use esp_idf_svc::hal::i2c::I2cDriver;

use core::cell::RefCell;
use embedded_hal_bus::i2c as i2c_bus;

use embedded_graphics::{
    mono_font::{ascii::FONT_6X10, MonoTextStyleBuilder},
    pixelcolor::BinaryColor,
    prelude::*,
    text::{Baseline, Text},
};
use ssd1306::{prelude::*, Ssd1306};

#[derive(Debug)]
#[toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let mut power_pin = PinDriver::output(peripherals.pins.gpio4)?;
    let mut led = PinDriver::output(peripherals.pins.gpio2)?;
    power_pin.set_high()?;
    led.set_high()?;

    let sda = peripherals.pins.gpio21;
    let scl = peripherals.pins.gpio22;

    log::info!("Preparing to initialize...");
    led.set_low()?;

    let config = config::Config::default()
        //.scl_enable_pullup(false)
        //.sda_enable_pullup(false)
        ;
    log::info!("{:?}", &config);

    // Initialize I2C driver
    let i2c = I2cDriver::new(peripherals.i2c1, sda, scl, &config)?;

    log::info!("Creating I2C bus to share wire with multiple devices");
    let i2c_ref_cell = RefCell::new(i2c);

    log::info!("Creating Display interface...");
    let interface = I2CDisplayInterface::new(i2c_bus::RefCellDevice::new(&i2c_ref_cell));
    let mut display1 = Ssd1306::new(interface, DisplaySize128x64, DisplayRotation::Rotate0)
        .into_buffered_graphics_mode();
    display1.init().unwrap();

    let interface = I2CDisplayInterface::new(i2c_bus::RefCellDevice::new(&i2c_ref_cell));
    let mut display2 = Ssd1306::new(interface, DisplaySize128x64, DisplayRotation::Rotate0)
        .into_buffered_graphics_mode();
    display2.init().unwrap();

    let text_style = MonoTextStyleBuilder::new()
        .font(&FONT_6X10)
        .text_color(BinaryColor::On)
        .build();

    Text::with_baseline("Hello world!", Point::zero(), text_style, Baseline::Top)
        .draw(&mut display1)
        .unwrap();

    Text::with_baseline("Hello Rust!", Point::new(0, 16), text_style, Baseline::Top)
        .draw(&mut display1)
        .unwrap();

    display1.flush().unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("{:#?}", CONFIG);

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        match display1.clear(BinaryColor::Off) {
            Ok(_) => (),
            Err(e) => bail!("Fail clearing display: {:?}", e),
        };

        match led.is_set_high() {
            true => {
                led.set_low()?;
                Text::with_baseline("Display UNO", Point::zero(), text_style, Baseline::Top)
                    .draw(&mut display1)
                    .unwrap();

                Text::with_baseline(
                    "1 1 1 1 1 1 1 1 1 ",
                    Point::new(0, 16),
                    text_style,
                    Baseline::Top,
                )
                .draw(&mut display1)
                .unwrap();

                display1.flush().unwrap();
            }
            false => {
                led.set_high()?;
                Text::with_baseline(
                    "Display NUMERO DOS",
                    Point::zero(),
                    text_style,
                    Baseline::Top,
                )
                .draw(&mut display2)
                .unwrap();

                Text::with_baseline(
                    "2 2 2 2 2 2 2 2",
                    Point::new(0, 16),
                    text_style,
                    Baseline::Top,
                )
                .draw(&mut display2)
                .unwrap();

                display2.flush().unwrap();
            }
        }

        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(2));
    }
}
