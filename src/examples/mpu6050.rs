use anyhow::{bail, Result};
use toml_cfg::toml_config;

use esp_idf_hal::delay;
use esp_idf_hal::gpio::PinDriver;
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::i2c::{config, I2cDriver};
use esp_idf_svc::hal::prelude::Peripherals;

use sensesp::wifi::wifi;

use mpu6050::*;

#[derive(Debug)]
#[toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let mut power_pin = PinDriver::output(peripherals.pins.gpio4)?;
    let mut led = PinDriver::output(peripherals.pins.gpio2)?;
    power_pin.set_high()?;
    led.set_high()?;

    let sda = peripherals.pins.gpio21;
    let scl = peripherals.pins.gpio22;

    log::info!("Preparing to initialize...");
    led.set_low()?;

    let config = config::Config::default()
        //.scl_enable_pullup(false)
        //.sda_enable_pullup(false)
        ;
    log::info!("{:?}", &config);

    // Initialize I2C driver
    let i2c = I2cDriver::new(peripherals.i2c1, sda, scl, &config)?;

    let mut mpu = Mpu6050::new(i2c);

    log::info!("Initializing mpu");
    let mut delay = delay::Delay::new_default();

    match mpu.init(&mut delay) {
        Ok(_) => (),
        Err(e) => bail!("Failed to init mpu: {:?}", e),
    }

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("{:#?}", CONFIG);

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        match led.is_set_high() {
            true => {
                led.set_low()?;
            }
            false => {
                led.set_high()?;
            }
        }

        // get roll and pitch estimate
        let acc = mpu.get_acc_angles();
        println!("r/p: {:?}", acc);

        // get temp
        let temp = mpu.get_temp();
        println!("temp: {:?}c", temp);

        // get gyro data, scaled with sensitivity
        let gyro = mpu.get_gyro();
        println!("gyro: {:?}", gyro);

        // get accelerometer data, scaled with sensitivity
        let acc = mpu.get_acc();
        println!("acc: {:?}", acc);

        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(2));
    }
}
