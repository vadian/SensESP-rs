use std::time::Duration;

use anyhow::{bail, Result};
use bmp180_driver::{Common, Resolution, BMP180};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::gpio::Level;
use esp_idf_svc::hal::prelude::Peripherals;
use sensesp::wifi::wifi;
use toml_cfg::toml_config;

use esp_idf_svc::hal::delay::FreeRtos;
use esp_idf_svc::hal::gpio::PinDriver;
use esp_idf_svc::hal::i2c::config;
use esp_idf_svc::hal::i2c::I2cDriver;

#[derive(Debug)]
#[toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    let sda = peripherals.pins.gpio21;
    let scl = peripherals.pins.gpio22;

    let power = peripherals.pins.gpio2;
    let mut power = PinDriver::output(power)?;
    power.set_high()?;

    let led = peripherals.pins.gpio15;
    let mut led = PinDriver::output(led)?;
    led.set_high()?;
    std::thread::sleep(std::time::Duration::from_secs(1));
    log::info!("Initializing I2C...");

    // Initialize I2C driver
    let i2c = I2cDriver::new(peripherals.i2c0, sda, scl, &config::Config::default())?;

    log::info!("Creating Barometer...");
    // Create BMP180 sensor instance
    let mut sensor = BMP180::new(i2c, FreeRtos);

    // Check connection to the sensor
    log::info!("Checking connection...");
    loop {
        led.set_high()?;
        match sensor.check_connection() {
            Ok(_) => break,
            Err(err) => {
                log::warn!("Could not connect to I2C: {:?}", err);
                led.set_low()?;
                std::thread::sleep(Duration::from_secs(1));
            }
        }
    }

    log::info!("Initializing sensor...");
    // Initialize the sensor
    let mut sensor = match sensor.initialize() {
        Ok(s) => s,
        Err(err) => bail!("Could not initialize sensor: {:?}", err),
    };

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("{:#?}", CONFIG);

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            led.set_low()?;
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        led.set_high()?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
        let (temperature, pressure, altitude) = sensor.read_all(Resolution::UltraHighResolution)?;

        println!("Temperature: {} Â°C", temperature);
        println!("Pressure: {} Pa", pressure);
        println!("Altitude: {} meters", altitude);

        led.set_low()?;
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}
