use std::borrow::BorrowMut;
use std::sync::Mutex;
use std::time::Duration;

use anyhow::{bail, Result};
use bmp180_driver::{Common, Resolution, BMP180};
use esp_idf_hal::gpio::PinDriver;
use esp_idf_hal::i2c::APBTickType;
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::{Hertz, Peripherals};
use sensesp::wifi::wifi;
use toml_cfg::toml_config;

use esp_idf_svc::hal::delay::FreeRtos;
use esp_idf_svc::hal::i2c::config;
use esp_idf_svc::hal::i2c::I2cDriver;

use core::cell::RefCell;
use embedded_hal_bus::i2c as i2c_bus;
use embedded_hal_bus::i2c::MutexDevice;
use embedded_hal_bus::util::AtomicCell;

use embedded_graphics::{
    mono_font::{ascii::FONT_6X10, MonoTextStyleBuilder},
    pixelcolor::BinaryColor,
    prelude::*,
    text::{Baseline, Text},
};
use sensesp::i2c::I2CDisplayInterface;
use ssd1306::{prelude::*, Ssd1306};

#[derive(Debug)]
#[toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let mut power_pin = PinDriver::output(peripherals.pins.gpio4)?;
    let mut led = PinDriver::output(peripherals.pins.gpio2)?;
    power_pin.set_high()?;
    led.set_high()?;

    let sda = peripherals.pins.gpio21;
    let scl = peripherals.pins.gpio22;

    log::info!("Preparing to initialize...");
    led.set_low()?;

    let config = config::Config::default()
        //.scl_enable_pullup(false)
        //.sda_enable_pullup(false)
        ;
    log::info!("{:?}", &config);

    // Initialize I2C driver
    let i2c = I2cDriver::new(peripherals.i2c1, sda, scl, &config)?;

    log::info!("Creating I2C bus to share wire with multiple devices");
    let i2c_ref_cell = RefCell::new(i2c);

    log::info!("Creating Display interface...");
    let interface = I2CDisplayInterface::new(i2c_bus::RefCellDevice::new(&i2c_ref_cell));
    let mut display = Ssd1306::new(interface, DisplaySize128x64, DisplayRotation::Rotate0)
        .into_buffered_graphics_mode();
    display.init().unwrap();

    log::info!("Creating Barometer...");
    // Create BMP180 sensor instance
    let mut sensor = BMP180::new(i2c_bus::RefCellDevice::new(&i2c_ref_cell), FreeRtos);

    std::thread::sleep(std::time::Duration::from_secs(1));

    log::info!("Checking connection...");
    loop {
        match sensor.check_connection() {
            Ok(_) => break,
            Err(err) => {
                log::warn!("Could not connect to I2C: {:?}", err);
                std::thread::sleep(Duration::from_secs(1));
            }
        }
    }

    log::info!("Initializing sensor...");
    // Initialize the sensor
    let mut sensor = match sensor.initialize() {
        Ok(s) => s,
        Err(err) => bail!("Could not initialize sensor: {:?}", err),
    };

    let text_style = MonoTextStyleBuilder::new()
        .font(&FONT_6X10)
        .text_color(BinaryColor::On)
        .build();

    Text::with_baseline("Hello world!", Point::zero(), text_style, Baseline::Top)
        .draw(&mut display)
        .unwrap();

    Text::with_baseline("Hello Rust!", Point::new(0, 16), text_style, Baseline::Top)
        .draw(&mut display)
        .unwrap();

    display.flush().unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("{:#?}", CONFIG);

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    std::thread::sleep(Duration::from_secs(5));
    loop {
        match display.clear(BinaryColor::Off) {
            Ok(_) => (),
            Err(e) => bail!("Fail clearing display: {:?}", e),
        };

        let (temperature, pressure, altitude) = sensor.read_all(Resolution::UltraHighResolution)?;

        println!("Temperature: {} °C", temperature);
        println!("Pressure: {} Pa", pressure);
        println!("Altitude: {} meters", altitude);

        Text::with_baseline(
            &format!("Temperature: {} °C", temperature),
            Point::zero(),
            text_style,
            Baseline::Top,
        )
        .draw(&mut display)
        .unwrap();
        Text::with_baseline(
            &format!("Pressure: {} Pa", pressure),
            Point::new(0, 16),
            text_style,
            Baseline::Top,
        )
        .draw(&mut display)
        .unwrap();
        Text::with_baseline(
            &format!("Altitude: {} meters", altitude),
            Point::new(0, 32),
            text_style,
            Baseline::Top,
        )
        .draw(&mut display)
        .unwrap();

        display.flush().unwrap();

        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(2));
    }
}
