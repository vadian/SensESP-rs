use std::time::Duration;

use anyhow::{bail, Result};
use bmp180_driver::{Common, Resolution, BMP180};
use dht_sensor::dht22::{read as read_sensor, Reading};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::hal::prelude::Peripherals;
use sensesp::wifi::wifi;
use toml_cfg::toml_config;

use esp_idf_svc::hal::delay::FreeRtos;
use esp_idf_svc::hal::gpio::PinDriver;
use esp_idf_svc::hal::i2c::config;
use esp_idf_svc::hal::i2c::I2cDriver;

#[derive(Debug)]
#[toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

// Constants
const UPDATE_RATE_MS: u32 = 2000;

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    let power = peripherals.pins.gpio15;
    let mut power = PinDriver::output(power)?;
    power.set_high()?;

    std::thread::sleep(std::time::Duration::from_secs(1));
    log::info!("Initializing I2C...");
    // Setup DHT sensor pin properly
    let mut dht_pin = PinDriver::input_output_od(peripherals.pins.gpio21)?; // On GPIO pin 33;
    let mut dht_delay_provider = esp_idf_hal::delay::Ets;
    dht_pin.set_high()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    log::info!("{:#?}", CONFIG);

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        match read_sensor(&mut dht_delay_provider, &mut dht_pin) {
            Ok(reading) => log::info!("{:?}", reading),
            Err(e) => log::error!("DHT Sensor Reading Error {:?}", e),
        };
        FreeRtos::delay_ms(UPDATE_RATE_MS);
    }
}
